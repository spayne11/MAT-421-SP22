# -*- coding: utf-8 -*-
"""mat421.module1hw.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfG3L3u13VW6bpPt0huxf50V7cP0ENgx

Sydney Payne,
MAT 421,
Homework Assignment 1

9.1 Example
"""

37+17

bin(54)

37*17

bin(629)

"""9.2 Examples"""

import sys
sys.float_info

import numpy as np
np.spacing(1e9)

1e9==(1e9+np.spacing(1e9)/3)

l=(2**(2046-1023))*((1+sum(0.5**np.arange(1,53))))

sys.float_info.max

s=(2**(1-1023))*(1+0)

s

sys.float_info.min

sys.float_info.max+2==sys.float_info.max

sys.float_info.max+sys.float_info.max

2**(-1075)

2**(-1075)==0

2**(-1074)

"""9.3 Examples"""

4.9-4.845==0.055

4.9-4.845

4.8-4.845

0.1+0.2+0.3==0.6

round(0.1+0.2+0.3,5)==round(0.6,5)

# if we only do once
1+1/3-1/3

def add_and_subtract(iterations):
  result=1
  for i in range(iterations):
    result+=1/3
  for i in range(iterations):
    result-=1/3
  return result

# if we do this 100 times
add_and_subtract(100)

# if we do this 1000 times
add_and_subtract(1000)

# if we do this 10000 times
add_and_subtract(10000)

"""Homework Problems (9.4.2 Problems)

1. Binary Numbers to Integer: In this example, we code for the binary number (b) to be converted into the decimal number (d). This is done by multiplying the digits by 2 in increasing order starting at the right to the left.
"""

def my_bin_2_dec(b):
  d=0
  for digit in b:
    d=d*2+int(digit)
  return d

my_bin_2_dec([1,1,1])

7==4+2+1

1*2**2+1*2**1+1*2**0

my_bin_2_dec([1,0,0,1,0,1,1,1,0])

"""2. Integer to Binary Numbers: In this example, we change a decimal number (d) into a binary number (b). This is the inverse function of 1."""

def my_dec_2_bin(d):
  b=[]
  if d==0:
    b.append(0)
  while d>=1:
    b.append(d%2)
    d=d//2
  b.reverse()
  return b

my_dec_2_bin(231)

1*2**7+1*2**6+1*2**5+0*2**4+0*2**3+1*2**2+1*2**1+1*2**0

my_dec_2_bin(135.7)

"""3. Compare/Confirm: This function just confirms that if we plug in a number (b) into 1. will result in d, and that the same d in 2. will result back in b."""

my_bin_2_dec(my_dec_2_bin(2484859))

"""4. Adding Binary Numbers: In this example, we see the results of two binary numbers (b1 and b2) being added together."""

def my_bin_adder(b1,b2):
  max_len=max(len(b1),len(b2))
  b1=[0]*(max_len-len(b1))+b1
  b2=[0]*(max_len-len(b2))+b2
  b=[]
  carry=0
  for i in range(max_len-1,-1,-1):
    sum=carry+b1[i]+b2[i]
    res=1 if sum%2==1 else 0
    b.append(res)
    carry=0 if sum<2 else 1
  if carry!=0:
      b.append(1)
  b.reverse()
  return b

my_bin_adder([1,1,1,1,1],[1])

my_bin_2_dec([1,1,1,1,1])+my_bin_2_dec([1])

my_dec_2_bin(32)

1*2**5

"""5. The 64 bits are split as 1 for sing, 52 for fraction, and 11 for characteristics. As seen in the above examples from the chapter, we can see the maximum and minimum values. As the number of bits increases for charactistics, the precision of the data decreases.

6. ieee to decimal: In this example, we will convert a number (ieee) to its decimal form (d).
"""

def my_ieee_2_dec(ieee):
  s=ieee[0]
  e=0
  j=len(range(0,1))
  for i in range(1,12):
    e+=int(ieee[i])*2**j
    j-=1
    e=e-1023
  print(e)
  f=0
  j=1
  for k in range(12,53):
    f+=int(ieee[k])*1/2**(j)
    j+=1
  print(f)
  d=(-1)**int(s)*2**e*(1+f)
  return d

ieee

my_ieee_2_dec(ieee)

def my_ieee2dec(N):
  a=int(N[0])
  b=int(N[1:9],2)
  c=int("1"+N[9:],2)
  return (-1)**a*c/(a<<(len(N)-9-(b-127)))

clear[ieee]

"""7. Decimal to ieee:"""

def dec_2_ieee(d):
  return "{0:b}".format(int(d))
def dec_2frac_ieee(f):
  num=f
  print("decimal part recvd=",num)
  frac=[]
  while num!=0:
    binarybit=num*2
  if binarybit<1:
    num=binarybit
    binarybit=0
    frac.append(binarybit)
  else:
    num=binarybit-int(binarybit)
    binarybit=1
    frac.append(binarybit)
  print(*frac)
  return ".join(map(str,frac))"
def my_dec_2_ieee(d):
  if d>0:
    s="0"
  else:
    s="1"
    d=abs(d)
  num1=my_dec_2_bin(int(d))
  print("integer part=",num1)
  fr=d-int(d)
  num2=dec_2frac_ieee(fr)
  print("decimal part=",num)
  num_sci_format=str(num1)+'.'+num2
  print("interger.decimal format=",num_sci_format)
  m=0
  decimalpointpos=0
  for j in num_sci_format:
    if j=='.':
      print("binary decimal point postion",m)
      decimalpointpos=m
      m+=1
  lnum_sci_format=list(num_sci_format)
  lnum_sci_format.pop(decimalpointpos)
  lnum_sci_format.insert(1,'.')
  num_sci_format=".join(map(str,lnum_sci_format))"
  print(f"scientific fomrat={num_sci_format1}*(2**decimalpointpos)")
  print("length of num_sci_format1=",len(num_sci_format1))
  lmantissa=list(num_sci_format)[2:1]
  if len(lmantissa)<52:
    for i in range(len(lmantissa),52):
       print("mantissa-padded=",len(mantissa))
       mantissa_padded=".join(map(str,lmantissa))"
       print("mantissa-padded=",mantissa_padded)
       exponent=2**(11-1)-1+(decimalpointpos-1)
       print("exponent=",exponent)
       expo=my_dec_2_bin(exponent)
       print(f"expo={expo}")
  ieee=s+str(expo)+mantissa_padded
  return ieee

my_dec_2_ieee(745)

"""8. The smallest/largest gap is -31 to +31. This is the same range that the 6-bit format can support."""

2**(6-1)-1

1*2**4+1*2**3+1*2**2+1*2**1+1*2**0

"""9. Smallest Number (gap 1): The smallest number between 1 and 2 is 1. The gap between 1 and 2 is 1."""

def gap(a,b):
  return (b-a)
  np.spacing(1)==np.finfo(np.float64).eps
  a=int(input('Enter 1st Number:'))
  b=int(input('Enter 2nd Number:'))
  print(f'gap of {a} and {b} is {gap(a,b)}')
  print(f'smallest number between {a} and {b} is {gpa(a,b)}')

gap(1,2)

"""10. 
Advantages:
Better format for computers.
Octal format rather than hexidecimal.

Disadvantages:
Large strings of only 1 and 0.
Complicated arithematic with binary numbers.

11. Base 1

13(base 10)=1111111111111111(base 1)

5(base 10)=11111(base 1)

4(base 10)=1111(base 1)

11111(base 1)+1111(base 1)=111111111(base 1)=9(base 10)

11111(base 1)*1111(base 1)=11111 11111 11111 11111(base 1)=20(base 10)

12. Binary Numbers on Fingers: The maximum number that can be represented on 10 fingers is 1023. 2 numbers can be represented on 1 finger.
"""

2**1

2**10

2**10-1

"""13. n digits: You can multiply a binary number by 2, by multiplying by 10. You can then divide a binary number by 2 by removing the last digit."""

