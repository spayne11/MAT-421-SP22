# -*- coding: utf-8 -*-
"""mat421.moduleBhwpt2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DA6nlJjR7SxZ54kX7keSo8AaJYqz2Mow

Sydney Payne

Spring 2022 - MAT 421

Module B Part 2: 17.4-17.5

Examples from 17.4 Text
"""

import numpy as np
import numpy.polynomial.polynomial as poly
import matplotlib.pyplot as plt

plt.style.use("seaborn-poster")

x3=[0,1,2]
y3=[1,3,2]
p1_coeff=[1,-1.5,.5]
p2_coeff=[0,2,-1]
p3_coeff=[0,-.5,.5]

#get the polynomial function
p1=poly.Polynomial(p1_coeff)
p2=poly.Polynomial(p2_coeff)
p3=poly.Polynomial(p3_coeff)

x3_new=np.arange(-1.0,3.1,0.1)

fig=plt.figure(figsize=(10,8))
plt.plot(x3_new,p1(x3_new),"b",label="P1")
plt.plot(x3_new,p2(x3_new),"b",label="P2")
plt.plot(x3_new,p3(x3_new),"b",label="P3")

plt.plot(x3,np.ones(len(x3)),"ko",x3,np.zeros(len(x3)),"ko")
plt.title("Lagrange Basis Plynomials")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()
plt.show()

L=p1+3*p2+2*p3

fig=plt.figure(figsize=(10,8))
plt.plot(x3_new,L(x3_new),"b",x3,y3,"ro")
plt.title("Lagrange Polynomial")
plt.grid()
plt.xlabel("x")
plt.ylabel("y")
plt.show()

from scipy.interpolate import lagrange

f4=lagrange(x3,y3)

fig=plt.figure(figsize=(10,8))
plt.plot(x3_new,f4(x3_new),"b",x3,y3,"ro")
plt.title("Lagrange Polynomial")
plt.grid()
plt.xlabel("x")
plt.ylabel("y")
plt.show()

"""Examples from 17.5 """

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

# %matplotlib inline

def divided_diff(x, y):
    '''
    function to calculate the divided
    differences table
    '''
    n = len(y)
    coef = np.zeros([n, n])
    # the first column is y
    coef[:,0] = y
    
    for j in range(1,n):
        for i in range(n-j):
            coef[i][j] = \
           (coef[i+1][j-1] - coef[i][j-1]) / (x[i+j]-x[i])
            
    return coef

def newton_poly(coef, x_data, x):
    '''
    evaluate the newton polynomial 
    at x
    '''
    n = len(x_data) - 1 
    p = coef[n]
    for k in range(1,n+1):
        p = coef[n-k] + (x -x_data[n-k])*p
    return p

x = np.array([-5, -1, 0, 2])
y = np.array([-2, 6, 1, 3])
# get the divided difference coef
a_s = divided_diff(x, y)[0, :]

# evaluate on new data points
x_new = np.arange(-5, 2.1, .1)
y_new = newton_poly(a_s, x, x_new)

plt.figure(figsize = (12, 8))
plt.plot(x, y, 'bo')
plt.plot(x_new, y_new)

"""Example Problems

Ch 17 #9
"""

import numpy as np
import matplotlib.pyplot as plt

def my_lagrange(x9,y9,x9_val):
  y9_val=0
  for i in range(len(x9)):
    P9=1
  for j in range(len(x9)):
    if i!=j:
      Px9=x9_val-x9[j]
      Dx9=x9[i]-x9[j]
      P9=P9*Px9/Dx9
    y9_val=y9[i]*P9+y9_val
  return y9_val

x9=[0,1,2,3,4]
y9=[2,1,3,5,1]
x9_val=np.linspace(0,4,101)

plt.figure(figsize=(10,8))
plt.plot(x9_val,my_lagrange(x9,y9,x9_val),"b",label="interpolation")
plt.plot(x9,y9,"ro",label="data points")
plt.xlabel("x")
plt.ylabel("y")
plt.title("Lagrange Interpolation of Data Points")
plt.legend()
plt.show()

x9=[0,1,2,3,4]
y9=[2,1,3,5,1]
x9_val=np.linspace(0,4,101)

my_lagrange(x9,y9,x9_val)

plt.figure(figsize=(10,8))
plt.plot(x9_val,my_lagrange(x9,y9,x9_val),"b",label="interpolation")
plt.plot(x9,y9,"ro",label="data points")
plt.xlabel("x")
plt.ylabel("y")
plt.title("Lagrange Interpolation of Data Points")
plt.legend()
plt.show()

"""Ch 17 #10"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

# %matplotlib inline

def divided_diff(x10, y10):
    '''
    function to calculate the divided
    differences table
    '''
    n = len(y10)
    coef = np.zeros([n, n])
    # the first column is y10
    coef[:,0] = y10
    
    for j in range(1,n):
        for i in range(n-j):
            coef[i][j] = \
           (coef[i+1][j-1] - coef[i][j-1]) / (x[i+j]-x[i])
            
    return coef

def newton_poly(coef, x_data10, x10):
    '''
    evaluate the newton polynomial 
    at x10
    '''
    n = len(x_data10) - 1 
    p = coef[n]
    for k in range(1,n+1):
        p = coef[n-k] + (x10 -x_data10[n-k])*p
    return p

x=x10

x10 = np.array([0,1,2,3,4])
y10 = np.array([2,1,3,5,1])
# get the divided difference coef
a_s10 = divided_diff(x10, y10)[0,:]

# evaluate on new data points
x_new10 = np.arange(-5, 2.1, .1)
y_new10 = newton_poly(a_s10, x10, x_new10)

plt.figure(figsize = (12, 8))
plt.plot(x10, y10, 'bo')
plt.plot(x_new10, y_new10)

"""Lagrange Polynomial Interpolation Examples

1
"""

import numpy as np

n1=int(input('Enter number of data points:'))
x1=np.zeros((n1))
y1=np.zeros((n1))
print('Enter data for x1 and y1:')
for i in range(n1):
  x1[i]=float(input('x1['+str(i)+']='))
  y1[i]=float(input('y1['+str(i)+']='))

xp1=float(input('Enter interpolation point:'))
yp1=0
for i in range(n1):
  p1=0
  for j in range(n1):
    if i!=j:
      p1=p1*(xp1-x1[j])/(x1[i]-x1[j])
  yp1=yp1+p1*y1[i]
print('Interpolated value at %.3f is %.3f'%(xp1,yp1))

"""2"""

from scipy.interpolate import lagrange
x2=np.array([0,1,2])
y2=x2**3
poly2=lagrange(x2,y2)

"""3"""

from math import*
def lagrange_interpolation(x3,y3,u3):
  r3=range(len(y3))
  a3=[y3[i]/product(x3[i]-x3[j] for j in r3 if j!=i) for i in r3]
  for j in r3:
    if j!=i:
    return sum(a3[i]*product([u3-x3[j])
def product(a3):
  p3=1
  for i in a3:p3*=i
  return p3

x3=[0,1,2,5]
y3=[2,3,12,147]
x30=2
esti=lagrange_interpolation(x3,y3,x30)
print("value at x30:",esti)

"""Newton's Polynomial Interpolation Examples

1
"""

from re import A
from locale import ABDAY_5
def _poly_newton_coefficient(x4,y4):
  """
  x4: list or np array containing x4 data points
  y4: list or np array containing y4 data points
  """
  m4=len(x4)
  x4=np.copy(x4)
  a4=np.copy(y4)
  for k in range(1,m4):
    a4[k:m4]=(a4[k:m4]-a4[k-1])/(x4[k:m4]-x4[k-1])
  return a4

def newton_polynomial(x4_data,y4_data,x4):
  """
  x4_data: data points at x4
  y4_data: data points at y4
  x4: evaluatoin point(s)
  """
  a4=_poly_newton_coefficient(x4_data,y4_data)
  n4=len(x4_data)-1
  p4=a4[n4]
  for k in range(1,n4+1):
    p4=a4[n4-k]+(x4-x4_data[n4-k])*p4
  return p4

x4_data=[0,1,2,5.5,11,13,16,18]
y4_data=[0.5,3.134,5.9,9.9,10.2,9.35,7.2,6.2]
x4=np.copy(x4_data)

newton_polynomial(x4_data,y4_data,x4)

"""2"""

from matplotlib.pyplot import *
from numpy import *

xpt=array([0,2,3,5])
ypt=array([1,5,0,8])

#Newton's Divided Difference, produces coefficients of 
#interpolating polynomial
def NDD(x5,y5):
  n5=len(x5)
  #construct table and load xy pairs in first columns
  A5=zeros((n5,n5+1))
  A5[:,0]=x5[:]
  A5[:,1]=y5[:]
  #Fill in Divided differences
  for j in range(2,n5+1):
    for i in range(j-1,n5):
      A5[i,j]=(A5[i,j-1]-A5[i-1,j-1])/(A5[i,0]-A5[i-j+1,0])
  #Copy diagonal elements into array for returning
  p5=zeros(n5)
  for k in range(0,n5):
    p5[k]=A5[k,k+1]
  return p5

#Evaluates polynomial at 't' given x-values and coefficients
def poly(t,x5,p5):
  n5=len(x5)
  out5=p5[n5-1]
  for i in range(n5-2,-1,-1):
    out5=out5*(t-x5[i])+p5[i]
  return out5

#Calculates correct coefficients and graphs interpolating polynomial
a5=NDD(xpt,ypt)
tval=linspace(min(xpt)-1,max(xpt)+1,100)
yval=poly(tval,xpt,a5)
plot(tval,yval,color='green',linestyle='-',label='poly')

#Annotates graph and plots points used for interpolation
title('Interpolation')
xlabel('x values')
ylabel('y values')
legend(loc='best')
plot(xpt,ypt,color='blue',marker='o')

"""3"""

def u_cal(u6,n6):
  temp=u6
  for i in range(1,n6):
    temp=temp*(u6-i)
  return temp

def fact(n6):
  f=1
  for i in range(2,n6+1):
    f*=i
  return f

n6=4
x6=[45,50,55,60]
y6=[[0 for i in range(n6)] for j in range(n6)]
y6[0][0]=0.7071
y6[1][0]=0.7660
y6[2][0]=0.8192
y6[3][0]=0.8660
for i in range(1,n6):
  for j in range(n6-i):
    y6[j][i]=y6[j+1][i-1]-y6[j][i-1]
for i in range(n6):
  print(x6[i],end="\t")
  for j in range(n6-i):
    print(y6[i][j],end="\t")
  print("")
value=52
sum=y6[0][0]
u6=(value-x6[0]/x6[1]-x6[0])
for i in range(1,n6):
  sum=sum+(u_cal(u6,i)*y6[0][i]/fact(i))
print("\n6 value at",value,"is",round(sum,6))